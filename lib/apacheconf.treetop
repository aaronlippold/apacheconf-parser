grammar ApacheConf
    rule conf
        line*
        {
            def value
                HttpdconfParser.rec_collect self
            end
        }
    end
    
    rule line
        logformat / directive / comment / vh_entry / dir_entry / ifdef_entry / ifmod_entry / files_entry / loc_entry / alias 
        {
            def value
                super
            end
        }
    end

    rule vh_entry
        white vhost_header entries:(white line white)* vhost_footer white
        {
            def value
                lines = HttpdconfParser.rec_collect entries
                v = vhost_header.value
                v[:entries] = lines.flatten
                v
            end
        }
    end
    
    rule dir_entry
        white dir_header entries:(white line white)* white dir_footer white
        {
            def value
                lines = HttpdconfParser.rec_collect entries
                v = dir_header.value
                v[:entries] = lines.flatten
                v 
            end
        }        
    end

    rule ifdef_entry
        white ifdef_header entries:(white line white)* white ifdef_footer white
        {
            def value
                lines = HttpdconfParser.rec_collect entries
                v = ifdef_header.value
                v[:entries] = lines.flatten
                v 
            end
        }        
    end

    rule ifmod_entry
        white ifmod_header entries:(white line white)* white ifmod_footer white
        {
            def value
                lines = HttpdconfParser.rec_collect entries
                v = ifmod_header.value
                v[:entries] = lines.flatten
                v 
            end
        }        
    end

    rule files_entry
        white files_header entries:(white line white)* white files_footer white
        {
            def value
                lines = HttpdconfParser.rec_collect entries
                v = files_header.value
                v[:entries] = lines.flatten
                v 
            end
        }        
    end

    rule loc_entry
        white loc_header entries:(white line white)* white loc_footer white
        {
            def value
                lines = HttpdconfParser.rec_collect entries
                v = loc_header.value
                v[:entries] = lines.flatten
                v 
            end
        }        
    end


    rule ip_addr
        p1:number '.' p2:number '.' p3:number '.' p4:number 
        {
            def value
                {:ip_addr => [p1.text_value.to_i, p2.text_value.to_i, p3.text_value.to_i, p4.text_value.to_i]}
            end
        }
    end

    rule ipdefault
        '_default_'
        {
            def value
                {:ip_addr => [0, 0, 0, 0]}
            end
        }
    end


    rule directive
        white keyword words:(space word space)+ white
        {
            def value
                { keyword.text_value.to_sym => words.elements.collect { |e| e.text_value.strip } }
            end
        }
    end

     rule logformat 
        white 'LogFormat' white string space word white
        {
            def value
                { :logformat => [string.text_value, word.text_value.strip] }
            end
        }
    end
 
     rule alias
        white 'Alias' white word white string white
        {
            def value
                { :alias => [word.text_value.strip, string.text_value] }
            end
        }
    end

    rule vhost_header
        '<VirtualHost' space i:(ip_addr / ipdefault) ':'? port_num:number? '>'
        {
            def value
                port = nil
                if !port_num.nil? && !port_num.text_value.empty?
                    port = port_num.text_value.to_i
                end
               
                v = { :ip_addr => i.value[:ip_addr] }
                if port
                    v[:port] = port
                end
                v
            end
        }
    end

    rule vhost_footer
        white '</VirtualHost>' white
    end
    
    rule dir_header
        '<Directory' space word '>'
        {
            def value
                { :directory => word.text_value }
            end
        }
    end
    
    rule comment
        white '#' (!"\n" . )* white
        {
            def value
                []
            end
        }
    end
    
    rule dir_footer
        white '</Directory>' white
    end

    rule ifdef_header
        '<IfDefine' space word '>'
        {
            def value
                { :ifdef => word.text_value }
            end
        }
    end
    
    rule ifdef_footer
        white '</IfDefine>' white
    end
 
    rule ifmod_header
        '<IfModule' space word '>'
        {
            def value
                { :ifmod => word.text_value }
            end
        }
    end
    
    rule ifmod_footer
        white '</IfModule>' white
    end
 
    rule files_header
        '<Files' space word '>'
        {
            def value
                { :files => word.text_value }
            end
        }
    end
    
    rule files_footer
        white '</Files>' white
    end

    rule loc_header
        '<Location' space word '>'
        {
            def value
                { :loc => word.text_value }
            end
        }
    end
    
    rule loc_footer
        white '</Location>' white
    end
            
    rule keyword
         'ServerRoot' / 'ResourceConfig' / 'AccessConfig' / 'Port' / 'include' / 'NameVirtualHost' / 'php_admin_value' / 'AddType' / 'Action' / 'ServerAdmin' / 'SSLEngine' / 'SSLCertificateFile' / 'SSLCertificateKeyFile' / 'SSLLogLevel' / 'SSLVerifyClient' / 'SSLVerifyDepth' / 'Options' / 'ServerName' / 'ServerAlias' / 'DocumentRoot' / 'AccessFileName' / 'AddHandler' / 'Redirect' / 'SSLCACertificateFile' / 'SSLOptions' / 'SetEnvIf' / 'SSLProtocol' / 'SSLCipherSuite' / 'ScriptAlias' / 'ServerType' / 'PidFile' / 'ScoreBoardFile' / 'Timeout' / 'KeepAlive' / 'MaxKeepAliveRequests' / 'KeepAliveTimeout' / 'MinSpareServers' / 'MaxSpareServers' / 'StartServers' / 'MaxClients' / 'MaxRequestsPerChild' / 'MaxCPUPerChild' / 'MaxDATAPerChild' / 'MaxNOFILEPerChild' / 'MaxRSSPerChild' / 'MaxSTACKPerChild' / 'Include' / 'Listen' / 'User' / 'Group' / 'AllowOverride' / 'Order' / 'Allow' / 'DirectoryIndex' / 'AccessFileName' / 'Deny' / 'UseCanonicalName' / 'TypesConfig' / 'DefaultType'/ 'MIMEMagicFile' / 'HostnameLookups' / 'ErrorLog' / 'LogLevel' / 'CustomLog' / 'IndexOptions' / 'AddIconByType' / 'AddIconByEncoding' / 'AddIcon' / 'DefaultIcon' /'ReadmeName' /'HeaderName' /'IndexIgnore' /'AddEncoding' /'AddLanguage' /'LanguagePriority' /'AddType' /'BrowserMatch' /'SSLPassPhraseDialog' /'SSLSessionCache' /'SSLSessionCacheTimeout' /'SSLMutex' /'SSLRandomSeed' /'SSLLog' /'SSLLogLevel' / 'SetHandler' / 'TransferLog'
    end

    rule space
        ("\\\n" / [ \t])*
    end

    rule white
        [ \t\n\r\f]*
    end
    
    rule word
        [()a-zA-Z_.,/0-9"'#@\-\*:~\+\!\^\?\.\\;%{}_]+
    end
    
    rule number
        [0-9]+
    end
    
    # http://thingsaaronmade.com/blog/a-quick-intro-to-writing-a-parser-using-treetop.html
   rule string
     '"' ([^"\\] / "\\" . )* '"' 
   end

end
    
